class env extends uvm_env;

	`uvm_component_utils(env)

	src_agt srch;
	dst_agt dsth;
	v_sequencer v_seqrh;
	scoreboard sbh;
	env_config m_env_cfgh;
	src_config src_cfg;
	dst_config dst_cfg;

function new(string name="env",uvm_component parent);
	super.new(name,parent);
endfunction

function void build_phase(uvm_phase phase);
	super.build_phase(phase);
	m_env_cfgh=env_config::type_id::create("m_env_cfgh");
	if(!uvm_config_db#(env_config)::get(this,"","env_config",m_env_cfgh))
		`uvm_fatal("FATAL","cannot get a config")
	if(m_env_cfgh.has_dst_agt)
		dsth=dst_agt::type_id::create("dsth",this);
	if(m_env_cfgh.has_src_agt)
		srch=src_agt::type_id::create("srch",this);
	if(m_env_cfgh.has_scoreboard)
		sbh=scoreboard::type_id::create("sbh",this);
	if(m_env_cfgh.has_v_sequencer)
		v_seqrh=v_sequencer::type_id::create("v_seqrh",this);

	uvm_config_db#(src_config)::set(this,"*","src_config",m_env_cfgh.src_cfg);
	uvm_config_db#(dst_config)::set(this,"*","dst_config",m_env_cfgh.dst_cfg);
	
endfunction

function void connect_phase(uvm_phase phase);
	v_seqrh.srcseqrh=srch.src_seqrh;
	srch.src_monh.src_monitor_port.connect(sbh.src_fifoh.analysis_export);
	dsth.dst_monh.dst_monitor_port.connect(sbh.dst_fifoh.analysis_export);
endfunction

endclass